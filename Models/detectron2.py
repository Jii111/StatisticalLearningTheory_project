# -*- coding: utf-8 -*-
"""detectron2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15ovEez8yyMoujcV8la_QwCr1tppnmZg5
"""

import json
import os
from pycocotools.coco import COCO

# 본인 경로로 수정
train_dataset_dir = "/content/drive/MyDrive/train/train"
train_json_dir = "/content/drive/MyDrive/train/train/_annotations.coco.json"

test_dataset_dir = "/content/drive/MyDrive/test/test"
test_json_dir = "/content/drive/MyDrive/test/test/_annotations.coco.json"

valid_dataset_dir = "/content/drive/MyDrive/valid/valid"
valid_json_dir = "/content/drive/MyDrive/valid/valid/_annotations.coco.json"

# json 파일을 읽고 key별로 정보 저장
with open(train_json_dir, 'r') as f:
    train_json = json.loads(f.read())

# Extract information from the training dataset JSON
train_images = train_json['images']
train_categories = train_json['categories']
train_annotations = train_json['annotations']

# categories_names: category_id와 이름을 매핑해주는 변수
categories_names = ['None']
for cat_dict in train_categories:
    categories_names.append(cat_dict['name'])

# coco: train_json 파일을 COCO api 형태로 불러온 변수
coco_train = COCO(train_json_dir)

# test
with open(test_json_dir, 'r') as f:
    test_json = json.loads(f.read())

# Extract information from the test dataset JSON
test_images = test_json['images']
test_categories = test_json['categories']
test_annotations = test_json['annotations']

coco_test = COCO(test_json_dir)

# valid
with open(valid_json_dir, 'r') as f:
    valid_json = json.loads(f.read())

# Extract information from the validation dataset JSON
valid_images = valid_json['images']
valid_categories = valid_json['categories']
valid_annotations = valid_json['annotations']

coco_valid = COCO(valid_json_dir)

from google.colab import drive
drive.mount('/content/drive')

# torchvision 설치
!pip install -U torch torchvision
!pip install git+https://github.com/facebookresearch/fvcore.git
import torch, torchvision
torch.__version__

# Commented out IPython magic to ensure Python compatibility.
# Detectron2 레포지토리 클론
!git clone https://github.com/facebookresearch/detectron2 detectron2_repo

# detectron2_repo 디렉토리로 이동
# %cd detectron2_repo

# Detectron2 패키지를 편집 모드로 설치
!pip install -e .

# You may need to restart your runtime prior to this, to let your installation take effect
# Some basic setup
# Setup detectron2 logger
import detectron2
from detectron2.utils.logger import setup_logger
setup_logger()


# import some common libraries
import matplotlib.pyplot as plt
import numpy as np
import cv2
from google.colab.patches import cv2_imshow

# import some common detectron2 utilities
from detectron2.engine import DefaultPredictor
from detectron2.config import get_cfg
from detectron2.utils.visualizer import Visualizer
from detectron2.data import MetadataCatalog, DatasetCatalog

from detectron2.structures import BoxMode
from detectron2.data import DatasetCatalog, MetadataCatalog
from detectron2 import model_zoo
from detectron2.engine import DefaultTrainer
from detectron2.config import get_cfg
import os
import cv2

# Register datasets for Detectron2
def register_datasets(dataset_name, image_dir, json_path):
    DatasetCatalog.register(dataset_name, lambda dataset_name=dataset_name: get_dicts(image_dir, json_path))
    MetadataCatalog.get(dataset_name).set(thing_classes=categories_names)
    return dataset_name

# Convert COCO format to Detectron2 format
def get_dicts(img_dir, coco_json):
    with open(coco_json, 'r') as f:
        coco_data = json.load(f)

    dataset_dicts = []
    for idx, img in enumerate(coco_data['images']):
        record = {}

        filename = os.path.join(img_dir, img['file_name'])
        img_data = cv2.imread(filename)

        if img_data is None:
            print(f"경고: 이미지 {filename}를 읽을 수 없습니다. 건너뜁니다...")
            continue

        height, width = img_data.shape[:2]

        record["file_name"] = filename
        record["image_id"] = idx
        record["height"] = height
        record["width"] = width

        objs = []
        for ann in coco_data['annotations']:
            if ann['image_id'] == img['id']:
                obj = {
                    "bbox": ann['bbox'],
                    "bbox_mode": BoxMode.XYWH_ABS,
                    "category_id": ann['category_id'] + 1,
                }
                objs.append(obj)
        record["annotations"] = objs
        dataset_dicts.append(record)

    return dataset_dicts


# Register datasets
train_dataset_name = register_datasets("my_train_dataset", train_dataset_dir, train_json_dir)
test_dataset_name = register_datasets("my_test_dataset", test_dataset_dir, test_json_dir)
valid_dataset_name = register_datasets("my_valid_dataset", valid_dataset_dir, valid_json_dir)

# Configure Detectron2
cfg = get_cfg()
cfg.merge_from_file(model_zoo.get_config_file("COCO-Detection/faster_rcnn_R_50_FPN_3x.yaml"))
cfg.DATASETS.TRAIN = (train_dataset_name,)
cfg.DATASETS.TEST = (test_dataset_name,)
cfg.DATASETS.VALID = (valid_dataset_name,)
cfg.DATALOADER.NUM_WORKERS = 2
cfg.MODEL.WEIGHTS = model_zoo.get_checkpoint_url("COCO-Detection/faster_rcnn_R_50_FPN_3x.yaml")  # You can also use your own pre-trained model weights
cfg.SOLVER.IMS_PER_BATCH = 2
cfg.SOLVER.BASE_LR = 0.00025
cfg.SOLVER.MAX_ITER = 1000
cfg.MODEL.ROI_HEADS.NUM_CLASSES = len(categories_names) - 1  # Subtract 1 because Detectron2 uses 0-indexed labels

# Train the model
os.makedirs(cfg.OUTPUT_DIR, exist_ok=True)
trainer = DefaultTrainer(cfg)
trainer.resume_or_load(resume=False)
trainer.train()

